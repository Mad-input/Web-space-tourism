---
import Layout from "../layouts/Layout.astro";
import LayoutPage from "../layouts/LayoutPage.astro";
---

<Layout title="Destination" pageId={2}>
  <LayoutPage title="Pick Your Destination" id={1}>
    <div class="info-destination">
      <div class="container-img">
        <img
          src="/assets/destination/image-moon.webp"
          alt="moon"
          id="imgHTML"
        />
      </div>

      <div class="options-destination">
        <ul class="list-destination">
          <li class=`item-list-destination` data-id="0">Moon</li>
          <li class=`item-list-destination` data-id="1">Mars</li>
          <li class=`item-list-destination` data-id="2">Europa</li>
          <li class=`item-list-destination` data-id="3">Titan</li>
        </ul>
        <h2 id="titleDestination"></h2>
        <p id="descriptionDestination"></p>
        <span class="spa"></span>
        <div class="statistics">
          <div>
            <div class="title-span">AVG. Distance</div>
            <span class="distance" id="distance"></span>
          </div>
          <div>
            <div class="title-span">EST. Travel Time</div>
            <span class="distance" id="travel"></span>
          </div>
        </div>
      </div>
    </div>
  </LayoutPage>
</Layout>

<style>
  body {
    background: url("/assets/destination/background-destination-desktop.jpg")
      no-repeat;
    background-size: cover;
  }

  .info-destination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 157px;
    margin: 80px;

    .container-img {
      img {
        animation: fadeIn 0.5s linear;
      }
    }

    .options-destination {
      width: 450px;
      .list-destination {
        margin-bottom: 50px;

        .item-list-destination {
          list-style: none;
          display: inline-block;
          margin-right: 35px;
          padding: 12px 0;
          font-size: 16px;
          text-transform: uppercase;
          color: var(--second-text);
          letter-spacing: 2.7px;
          position: relative;
          cursor: pointer;

          &::before {
            content: "";
            display: none;
            position: absolute;
            bottom: 0;
            width: 100%;
            height: 3px;
            background: #fff;
          }

          &.active::before {
            display: inline-block;
          }

          &:hover::before {
            display: inline-block;
            background: rgba(255, 255, 255, 0.3);
          }

          &.active {
            color: #fff;
          }
        }
      }

      #titleDestination {
        font-size: 100px;
        color: #fff;
        font-weight: normal;
        font-family: var(--font-two);
        margin-bottom: 20px;
      }
      #descriptionDestination {
        font-size: 18px;
        color: var(--second-text);
        font-family: var(--font);
        line-height: 2;
        margin-bottom: 35px;
        letter-spacing: 0.5px;
      }

      .spa {
        display: inline-block;
        width: 100%;
        height: 1px;
        background: rgba(255, 255, 255, 0.3);
      }

      .statistics {
        display: flex;
        gap: 80px;
        div {
          display: inline-block;
          margin-top: 10px;
          .title-span {
            font-weight: normal;
            font-size: 15px;
            color: var(--second-text);
            margin-bottom: 15px;
          }
          .distance {
            display: block;
            font-weight: normal;
            font-family: var(--font-two);
            font-size: 28px;
            color: #fff;
          }
        }
      }
    }
  }

  @keyframes fadeIn {
    from {
      transform: translateY(30px);
      opacity: 0;
    }
  }
</style>

<script>
  const renderInfoInHTML = async (id: number) => {
    // Penticion para recuperar la informacion del archivo data.json
    const data = await fetch("src/data.json")
      .then((res) => res)
      .then((res) => res.json());
    const infoDestinations = data.destinations;
    let newInfo = infoDestinations[id];

    // Seleccionar elementos HTML Necesarios
    const $imgContainer = document.querySelector(".container-img"),
      $title = document.getElementById("titleDestination"),
      $description = document.getElementById("descriptionDestination"),
      $distance = document.getElementById("distance"),
      $travel = document.getElementById("travel"),
      img = document.createElement("img");
    img.setAttribute("src", newInfo.images.webp);
    img.id = "imgHTML";
    img.alt = newInfo.description.split(" ", 4);

    // Cargar la informacion en los elementos HTML
    $imgContainer.innerHTML = "";
    $imgContainer.append(img);
    $title.innerText = newInfo.name.toUpperCase();
    $description.innerText = newInfo.description;
    $distance.innerText = newInfo.distance.toUpperCase();
    $travel.innerText = newInfo.travel.toUpperCase();
  };

  // Recuperar el id en localStorage para no peder la selección
  const idLocal = localStorage.getItem("id");
  renderInfoInHTML(Number(idLocal));
  //
  const items = Array.from(document.querySelectorAll(".item-list-destination"));

  items.forEach((item) => {
    item.addEventListener("click", (e) => {
      const ClickElement = e.currentTarget;
      // recorrer nuevamente los elementos para remover la clase active
      items.forEach((item) => {
        if (item.classList.contains("active")) item.classList.remove("active");
      });

      ClickElement.classList.add("active");

      renderInfoInHTML(item.dataset.id);
      //Guardar la selección en localStorage
      localStorage.setItem("id", item.dataset.id);
    });
  });

  items.forEach((item) => {
    if (item.dataset.id === idLocal) item.classList.add("active");
  });
</script>
